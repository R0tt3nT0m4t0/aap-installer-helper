---

- name: Pre-configuration of RHEL servers for the AAP RPM Installation
  hosts: aap_cluster
  become: true

  vars:
    admin_user: ansible
    hosts_entries: |
      192.168.122.131  automationdatabase      automationdatabase.home.lab
      192.168.122.141  automationgateway       automationgateway.home.lab
      192.168.122.187  automationcontroller    automationcontroller.home.lab
      192.168.122.106  executionnode1          executionnode1.home.lab
      192.168.122.125  automationedacontroller automationedacontroller.home.lab
      192.168.122.114  automationhub           automationhub.home.lab
    #  Red Hat Registration Variables
    # Using credentials
    rhsm_username: ""
    rhsm_password: ""
    # Using token
    rhsm_activationkey: ""
    rhsm_org_id: ""

  pre_tasks:

    - name: Ensure community.crypto module is installed locally
      ansible.builtin.command: >
        ansible-galaxy collection install community.crypto
      become: false
      delegate_to: localhost
      changed_when: "'community.crypto not in ansible_collections'"

    - name: Ensure the python module dnspython is installed
      ansible.builtin.pip:
        name: dnspython
        state: present
      delegate_to: localhost

  tasks:

    - name: Register systems in the host table
      ansible.builtin.blockinfile:
        path: /etc/hosts
        block: "{{ hosts_entries }}"
        marker: "# {mark} ANSIBLE MANAGED BLOCK - AAP HOSTS"
        insertafter: "^::1"
        state: present

    - name: Ensure the installer user exist and its and administrator
      ansible.builtin.user:
        name: "{{ admin_user }}"
        comment: "Ansible Administrator"
        group: ansible
        groups: wheel
        generate_ssh_key: true
        ssh_key_bits: 4096
        ssh_key_file: ~/.ssh/id_rsa
        state: present
        create_home: true

    - name: Ensure installer user has sudo access
      ansible.builtin.copy:
        content: "{{ admin_user }} ALL=(ALL) NOPASSWD: ALL"
        dest: /etc/sudoers.d/{{ admin_user }}
        mode: "0440"
        owner: root
        group: root

    - name: Allowing services of the installer user to run when not logged in
      ansible.builtin.command: loginctl enable-linger {{ admin_user }}
      changed_when: false

    - name: Generate SSH Keys without password for the user {{ item }}
      community.crypto.openssh_keypair:
        path: "{{ (item == 'root') | ternary('/root/.ssh/id_rsa', '/home/' + item + '/.ssh/id_rsa') }}"
        type: "rsa"
        size: 4096
        owner: "{{ item }}"
        group: "{{ item }}"
        passphrase: ""
        mode: '0600'
        state: present
        force: false
      loop:
        - "{{ admin_user }}"
        - root

    - name: Ensure .ssh directory exists for the user {{ item }}
      ansible.builtin.file:
        path: "{{ (item == 'root') | ternary('/root/.ssh', '/home/' + item + '/.ssh') }}"
        state: directory
        owner: "{{ item }}"
        group: "{{ item }}"
        mode: '0700'
      loop:
        - "{{ admin_user }}"
        - root

    - name: Ensure authorized_keys file exist and has proper modes for {{ item }}
      ansible.builtin.copy:
        dest: "{{ (item == 'root') | ternary('/root/.ssh/authorized_keys', '/home/' + item + '/.ssh/authorized_keys') }}"
        content: ""
        owner: "{{ item }}"
        group: "{{ item }}"
        mode: '0600'
        force: false
      loop:
        - "{{ admin_user }}"
        - root

    - name: Share with root the ssh keys of the user {{ admin_user }}
      ansible.posix.authorized_key:
        user: root
        state: present
        key: "{{ lookup('file', '/home/{{ admin_user }}/.ssh/id_rsa.pub') }}"

    - name: Install subscription-manager if not present
      ansible.builtin.dnf:
        name: subscription-manager
        state: present

    - name: Register system using password
      community.general.redhat_subscription:
        username: "{{ rhsm_username }}"
        password: "{{ rhsm_password }}"
        auto_attach: true
        state: present
      no_log: true
      when: rhsm_username | length > 0 and rhsm_password | length > 0

    - name: Register system using activation key
      community.general.redhat_subscription:
        org_id: "{{ rhsm_org_id }}"
        activationkey: "{{ rhsm_activationkey }}"
        auto_attach: true
        state: present
      no_log: true
      when: rhsm_org_id | length > 0 and rhsm_activationkey | length > 0

    - name: Validate that BaseOS and AppStream repositories are enabled
      ansible.builtin.command: subscription-manager repos --list-enabled
      register: repos_enabled
      failed_when:
        - '"BaseOS" not in repos_enabled.stdout'
        - '"AppStream" not in repos_enabled.stdout'
      changed_when: false

    - name: Install utilities
      ansible.builtin.dnf:
        state: present
        disable_gpg_check: true
        name:
          - wget
          - git-core
          - rsync
          - vim
          - jq
          - tree
          - bash-completion
          - bind-utils

    - name: Configure vimrc
      ansible.builtin.copy:
        dest: "~{{ item }}/.vimrc"
        mode: "0600"
        owner: "{{ item }}"
        group: "{{ item }}"
        content: |
          syntax on
          set nocompatible autoindent smartindent expandtab tabstop=3
          set softtabstop=3 shiftwidth=3 number cursorline cursorcolumn showmatch
          set scrolloff=5 sidescrolloff=5 wildmenu wildmode=longest:full laststatus=2
          set showcmd title paste ignorecase smartcase incsearch hlsearch lazyredraw ttyfast
          filetype plugin indent on
          let mapleader = ","
        force: false
      loop:
        - "{{ admin_user }}"
        - root

    - name: Ensure umask configuration in {{ item }}
      ansible.builtin.lineinfile:
        path: "{{ item }}"
        regexp: '^umask'
        line: 'umask 0022'
        state: present
        insertafter: "^# By default"
        backup: true
      loop:
        - '/etc/profile'
        - '/etc/bashrc'
      when: inventory_hostname == 'automationgateway.home.lab'

    - name: Opening Firewall Ports
      block:

        - name: Ensure FirewallD is running and enabled
          ansible.builtin.service:
            name: firewalld
            state: started
            enabled: true

        - name: Create custom firewall zones
          ansible.posix.firewalld:
            zone: "{{ zone['key'] }}"
            state: present
            permanent: true
          loop: "{{ hostvars[inventory_hostname]['net'] | dict2items }}"
          loop_control:
            loop_var: zone
          when:
            - hostvars[inventory_hostname]['net'] is defined

        - name: Get Sources
          ansible.builtin.set_fact:
            source_rules: "{{ source_rules | default([]) + [{'zone': zone.key, 'sources': zone.value.sources}] }}"
          loop: "{{ hostvars[inventory_hostname]['net'] | dict2items }}"
          loop_control:
            loop_var: zone

        - name: Apply network SOURCE rules
          ansible.posix.firewalld:
            zone: "{{ item.0.zone }}"
            source: "{{ item.1 }}"
            permanent: true
            immediate: true
            state: enabled
          loop: "{{ source_rules | subelements('sources') }}"

        - name: Get Ports
          ansible.builtin.set_fact:
            port_rules: "{{ port_rules | default([]) + [{'zone': zone.key, 'ports': zone.value.ports}] }}"
          loop: "{{ hostvars[inventory_hostname]['net'] | dict2items }}"
          loop_control:
            loop_var: zone

        - name: Apply network PORT rules
          ansible.posix.firewalld:
            zone: "{{ item.0.zone }}"
            port: "{{ item.1 }}"
            permanent: true
            immediate: true
            state: enabled
          loop: "{{ port_rules | subelements('ports') }}"

        - name: Resolve required domains to IPs
          ansible.builtin.set_fact:
            whitelist_ips: "{{ whitelist_ips | default([]) + lookup('dig', item, wantlist=true) }}"
          loop:
            - "api.access.redhat.com"
            - "cert-api.access.redhat.com"
            - "cert.console.redhat.com"
            - "console.redhat.com"
            - "catalog.redhat.com"
            - "sso.redhat.com"
            - "automation-hub-prd.s3.amazonaws.com"
            - "automation-hub-prd.s3.us-east-2.amazonaws.com"
            - "galaxy.ansible.com"
            - "ansible-galaxy-ng.s3.dualstack.us-east-1.amazonaws.com"
            - "registry.redhat.io"
            - "cdn.quay.io"
            - "cdn01.quay.io"
            - "cdn02.quay.io"
            - "cdn03.quay.io"
            - "cdn04.quay.io"
            - "cdn05.quay.io"
            - "cdn06.quay.io"
            # Add more if needed...
          ignore_errors: true
          delegate_to: localhost
          run_once: true

        - name: Open HTTPS in the trusted zone
          ansible.posix.firewalld:
            zone: trusted
            port: "443/tcp"
            permanent: true
            immediate: true
            state: enabled

        - name: Allow access to Red Hat and Ansible services
          ansible.posix.firewalld:
            zone: trusted
            source: "{{ item }}"
            permanent: true
            immediate: true
            state: enabled
          loop: "{{ whitelist_ips | unique }}"

        - name: Fetch AWS S3 IP ranges
          ansible.builtin.uri:
            url: "https://ip-ranges.amazonaws.com/ip-ranges.json"
            return_content: true
          register: aws_ip_s3_ranges
          delegate_to: localhost
          run_once: true

        - name: Allow AWS S3 HTTPS
          ansible.posix.firewalld:
            zone: trusted
            source: "{{ item }}"
            permanent: true
            immediate: true
            state: enabled
          loop: "{{ aws_ip_s3_ranges.json.prefixes | selectattr('service', 'equalto', 'S3') | map(attribute='ip_prefix') | list }}"

    - name: Upgrade the system
      ansible.builtin.dnf:
        name: "*"
        state: latest
        update_cache: true
        update_only: true

    - name: Reboot machine
      ansible.builtin.reboot:
        msg: "Reboot initiated by Ansible after system upgrade"
        reboot_timeout: 600

  handlers:

    - name: Notify re-run
      ansible.builtin.fail:
        msg: "SSH keys where deployed. Please run the playbook again to continue."
      changed_when: false
